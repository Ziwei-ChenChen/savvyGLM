[{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"Generalized Linear Models (GLMs) widely used analyzing multivariate data non-normal responses. Iteratively Reweighted Least Squares (IRLS) algorithm main workhorse fitting models small medium-scale problems reduces estimation problem series Weighted Least Squares (WLS) subproblems, computationally less expensive solving full maximum likelihood optimization directly. However, IRLS can sensitive convergence issues—especially using standard Ordinary Least Squares (OLS) update iteration. cases model mis-specification high variability data, OLS estimator may yield significant estimation error. glm2 package improves upon standard glm incorporating step-halving strategy better handle convergence challenges. robust framework implemented glm.fit2 function. savvyGLM package, build robust framework provided glm2 package (function glm.fit2) replacing standard OLS update IRLS algorithm shrinkage estimator. rationale shrinkage estimation introduces small bias substantially reduce Mean Squared Error (MSE) OLS estimates, resulting reliable parameter estimates enhanced convergence stability. corresponding shrinkage paper can find Slab Shrinkage Linear Regression Estimation. Simulation studies real-data applications demonstrate replacing OLS update IRLS shrinkage estimator improves convergence overall performance GLM estimation compared traditional non-penalized implementation. summary, package modifies glm.fit2 glm2 : Leverage robust features, step-halving, already present glm2. Replace OLS update one several shrinkage estimators (e.g., St_ost, DSh_ost, SR_ost, GSR_ost, optionally Sh_ost). Employ parallelization multiple candidate methods specified. details, please see: Asimit, V., Chen, Z., Dimitrova, D., Xie, Y., & Zhang, Y. (2025). Shrinkage GLM Modeling.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"main-features","dir":"Articles","previous_headings":"Introduction","what":"Main Features","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"savvyGLM provides five classes shrinkage methods GLMs, although default four evaluated unless user explicitly includes Sh(since Sh time-consuming): Custom Optimization Methods: Implements shrinkage estimators (St_ost, DSh_ost, SR_ost, GSR_ost, optionally Sh_ost) replace standard OLS update IRLS. Flexible Model Choice: model_class argument allows users choose one shrinkage methods. default, \"St\", \"DSh\", \"SR\", \"GSR\" evaluated. Including \"Sh\" optional solving Sylvester equation required Sh_ost computationally intensive. Parallel Evaluation: multiple candidate methods specified, function evaluates parallel (use_parallel = TRUE) selects final model based lowest Akaike Information Criterion (AIC).","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"key-argument-and-output-summary","dir":"Articles","previous_headings":"Introduction","what":"Key Argument and Output Summary","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"vignette provides overview methods implemented savvyGLM demonstrates use simulated data real data. begin theoretical overview shrinkage class GLM IRLS, walk simulation examples illustrate apply savvyGLM method.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"shrinkage-estimators","dir":"Articles","previous_headings":"Theoretical Overview","what":"Shrinkage estimators","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"underlying optimization methods savvyGLM designed reduce theoretical mean square error introducing small bias yields substantial reduction variance. trade-leads reliable parameter estimates improved convergence properties Generalized Linear Models. , just provide table summary since detailed theoretical overview shrinkage estimators applied GLMs, please refer savvySh package, covers many shrinkage estimators used , context linear regression. methods savvyGLM extend ideas generalized linear models, ensuring IRLS updates incorporate shrinkage iteration.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"generalized-linear-model-and-its-irls-implementation","dir":"Articles","previous_headings":"Theoretical Overview","what":"Generalized Linear Model and its IRLS Implementation","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"GLM assumes response variable YY, defined set 𝒴⊆ℜ\\mathcal{Y} \\subseteq \\Re, related set covariates 𝐗\\mathbf{X} 𝒳⊆ℜd\\mathcal{X} \\subseteq \\Re{^d}. conditional distribution YY belongs exponential dispersion family, probability density mass function fY(y;θ,ϕ)=exp{θy−b(θ)(ϕ)+c(y,ϕ)}, f_Y(y; \\theta, \\phi) \\;=\\; \\exp\\left\\{\\frac{\\theta\\,y - b(\\theta)}{(\\phi)} \\;+\\; c(y, \\phi)\\right\\}, θ\\theta canonical parameter, ϕ\\phi dispersion parameter, aa, bb, cc known functions. mean YY linked linear predictor ηi=𝐱i⊤𝛃\\eta_i = \\mathbf{x}_i^\\top \\boldsymbol{\\beta} link function gg, 𝔼[Yi∣𝐗i=𝐱i]=h(𝐱i⊤𝛃), \\mathbb{E}[Y_i \\mid \\mathbf{X}_i = \\mathbf{x}_i] \\;=\\; h\\left(\\mathbf{x}_i^\\top \\boldsymbol{\\beta}\\right), h=g−1h = g^{-1} inverse link. canonical link, h(⋅)=b′(⋅)h(\\cdot) = b^\\prime(\\cdot). independent sample {(yi,𝐱i)}=1n\\left\\{(y_i, \\mathbf{x}_i)\\right\\}_{=1}^n, log-likelihood 𝛃\\boldsymbol{\\beta} can written ℓ(𝛃)=∑=1nθiyi−b(θi)(ϕ)+c(yi,ϕ), \\ell(\\boldsymbol{\\beta})  \\;=\\; \\sum_{=1}^n \\frac{\\theta_i\\,y_i \\;-\\; b(\\theta_i)}{(\\phi)} \\;+\\; c\\left(y_i, \\phi\\right), θi=(b′)−1∘h(𝐱i⊤𝛃)\\theta_i = (b^\\prime)^{-1}\\circ\\, h\\left(\\mathbf{x}_i^\\top \\boldsymbol{\\beta}\\right). Maximizing log-likelihood equivalent minimizing following objective function, 𝒞(𝛃)=−∑=1n(θiyi−b(θi)). \\mathcal{C}(\\boldsymbol{\\beta})  \\;=\\; -\\sum_{=1}^n \\left(\\theta_i\\,y_i \\;-\\; b(\\theta_i)\\right). Taking derivative 𝒞(𝛃)\\mathcal{C}(\\boldsymbol{\\beta}) respect 𝛃\\boldsymbol{\\beta} leads -called normal equations, can solved iteratively. particular, IRLS algorithm reformulates iteration WLS problem: 𝛃̂(t+1)=argmin𝛃(𝐳(t)−𝐗𝛃)⊤𝐖(t)(𝐳(t)−𝐗𝛃), \\widehat{\\boldsymbol{\\beta}}^{(t+1)}  \\;=\\; \\underset{\\boldsymbol{\\beta}}{\\mathrm{arg\\,min}} \\;\\left(\\mathbf{z}^{(t)} - \\mathbf{X}\\,\\boldsymbol{\\beta}\\right)^\\top \\mathbf{W}^{(t)} \\left(\\mathbf{z}^{(t)} - \\mathbf{X}\\,\\boldsymbol{\\beta}\\right), 𝐖(t)\\mathbf{W}^{(t)} diagonal matrix weights 𝐳(t)\\mathbf{z}^{(t)} pseudo-response iteration tt. Specifically, 𝐖(t)=diag((h′(ηi(t)))2/V(μi(t))),𝐳i(t)=ηi(t)+yi−μi(t)h′(ηi(t)), \\mathbf{W}^{(t)}  \\;=\\; \\mathrm{diag}\\left(\\left(h^\\prime(\\eta_i^{(t)})\\right)^2 / V\\left(\\mu_i^{(t)}\\right)\\right), \\quad \\mathbf{z}_i^{(t)}  \\;=\\; \\eta_i^{(t)} \\;+\\; \\frac{y_i - \\mu_i^{(t)}}{h^\\prime(\\eta_i^{(t)})}, μi(t)=h(ηi(t))\\mu_i^{(t)} = h(\\eta_i^{(t)}) ηi(t)=𝐱i⊤𝛃̂(t)\\eta_i^{(t)} = \\mathbf{x}_i^\\top \\widehat{\\boldsymbol{\\beta}}^{(t)}. , V(μi)V(\\mu_i) variance function determined exponential family, h′h^\\prime derivative inverse link. iterating WLS problem convergence (maximum number iterations reached), IRLS provides maximum likelihood estimates GLM parameters. savvyGLM, WLS updates enhanced applying shrinkage estimators (St_ost, DSh_ost, SR_ost, GSR_ost}, orSh_ost`) iteration, thereby improving estimation accuracy convergence stability.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"simulation-examples","dir":"Articles","previous_headings":"","what":"Simulation Examples","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"section presents simulation studies compare performance shrinkage estimators implemented savvyGLM package. compare standard IRLS update (implemented glm.fit2) various shrinkage methods implemented savvyGLM measuring L2L_2 distance estimated true coefficients. Lower L2L_2 values indicate better estimation accuracy. following data-generating processes (DGPs) considered logistic regression (LR), Poisson, Gamma GLMs log link sqrt link: Covariate Matrix: covariate matrix 𝐗∈ℜn×p\\mathbf{X} \\\\Re^{n \\times p} drawn multivariate normal distribution mean zero, unit variances, Toeplitz covariance matrix Σ\\Sigma Cov(Xi,j,Xk,j)=ρ|−k|\\text{Cov}(X_{,j}, X_{k,j}) = \\rho^{|-k|} ρ∈(−1,1)\\rho \\(-1,1). True Coefficients: true regression coefficients βj\\beta_j set alternate sign increase magnitude (e.g., 1,−1,2,−2,…1, -1, 2, -2, \\dots LR logit link). Poisson Gamma GLMs log link, smaller scaling used avoid numerical issues. Response Generation: LR: Compute linear predictor: ηi=β0+∑j=1pβjxij\\eta_i = \\beta_0 + \\sum_{j=1}^p \\beta_j x_{ij} generate Yi∼Binomial(1,11+e−ηi)Y_i \\sim \\text{Binomial}\\left(1, \\frac{1}{1+e^{-\\eta_i}}\\right). Poisson GLM:Two link functions considered:log link: μi=eηi\\mu_i = e^{\\eta_i}; sqrt link: μi=ηi2\\mu_i = \\eta_i^2. , generate Yi∼Poisson(μi)Y_i \\sim \\text{Poisson}(\\mu_i). Gamma GLM: Similarly, use μi=eηi\\mu_i = e^{\\eta_i} (log link) μi=ηi2\\mu_i = \\eta_i^2 (sqrt link), generate YiY_i Gamma distribution mean μi\\mu_i. scenario, fit GLM using standard IRLS update (.e., OLS-based) shrinkage-based IRLS update implemented savvyGLM. performance assessed using L2L_2 distance estimated true coefficients. Tables comparing distances relevant diagnostics provided illustrate benefits shrinkage approach. simulation studies aims demonstrate replacing OLS update shrinkage estimators IRLS algorithm improves convergence estimation accuracy, especially challenging settings multicollinearity extreme response values. Note: Due differences underlying libraries random number generation implementations (e.g., BLAS/LAPACK RNG behavior), data generated functions like mvrnorm may differ slightly Windows macOS/Linux, even seed.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"balanced-data","dir":"Articles","previous_headings":"Simulation Examples > Logistic Regression","what":"Balanced Data","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"simulation, balanced binary responses generated using logit link. Covariates sampled multivariate normal distribution Toeplitz covariance matrix determined various correlation coefficients. ensure balanced dataset, larger dataset first generated, subset selected achieve roughly equal proportions 0’s 1’s. fit models using standard GLM (via glm.fit2) shrinkage-based GLM (via savvy_glm.fit2in savvyGLM package). summary table produced compare distances across different ρ\\rho values. L2 Distance Estimated True Coefficients (Balanced LR)","code":"# Load packages library(savvyGLM) library(MASS) library(glm2) #>  #> Attaching package: 'glm2' #> The following object is masked from 'package:MASS': #>  #>     crabs library(CVXR) #>  #> Attaching package: 'CVXR' #> The following object is masked from 'package:MASS': #>  #>     huber #> The following object is masked from 'package:stats': #>  #>     power library(knitr)  set.seed(123) n_val <- 500 p_val <- 25 rho_vals <- c(-0.75, -0.5, 0, 0.5, 0.75) mu_val <- 0 target_proportion <- 0.5 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- binomial(link = \"logit\")  sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  findStartingValues <- function(x, y) {   beta <- Variable(ncol(x))   eta <- x %*% beta   g_y <- (y + 0.5) / 2   logit_g_y <- log(g_y / (1 - g_y))   objective <- Minimize(sum_squares(logit_g_y - eta))   problem <- Problem(objective)   result <- solve(problem)   as.numeric(result$getValue(beta)) }  model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\", \"Sh\") l2_matrix <- matrix(NA, nrow = length(model_names), ncol = length(rho_vals),                     dimnames = list(model_names, paste0(\"rho=\", rho_vals))) for (j in seq_along(rho_vals)) {   rho_val <- rho_vals[j]   Sigma <- sigma.rho(rho_val, p_val)   n_val_large <- n_val * 10      X_large <- mvrnorm(n_val_large, mu = rep(mu_val, p_val), Sigma = Sigma)   X_large_intercept <- cbind(1, X_large)   beta_true <- theta_func(p_val + 1)   mu_y_large <- as.vector(1 / (1 + exp(-X_large_intercept %*% beta_true)))   y_large <- rbinom(n = n_val_large, size = 1, prob = mu_y_large)    y_zero_indices <- which(y_large == 0)[1:round(n_val * target_proportion)]   y_one_indices <- which(y_large == 1)[1:(n_val - round(n_val * target_proportion))]   final_indices <- c(y_zero_indices, y_one_indices)   X_final <- X_large_intercept[final_indices, ]   y_final <- y_large[final_indices]   starting_values <- findStartingValues(X_final, y_final)      fit_ols <- glm.fit2(X_final, y_final, start = starting_values,                       control = control_list, family = family_type)   l2_matrix[\"OLS\", j] <- norm(fit_ols$coefficients - beta_true, type = \"2\")    for (m in model_names[-1]) {     fit <- savvy_glm.fit2(X_final, y_final, model_class = m,                            start = starting_values, control = control_list, family = family_type)     l2_matrix[m, j] <- norm(fit$coefficients - beta_true, type = \"2\")   } } l2_table <- as.data.frame(l2_matrix) kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients (Balanced LR)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"imbalanced-data","dir":"Articles","previous_headings":"Simulation Examples > Logistic Regression","what":"Imbalanced Data","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"imbalanced LR, simulation settings similar except target proportion negative class reduced (example, 5% responses 0’s). results skewed binary response, allows us evaluate robustness shrinkage estimators class imbalance. , models fit using standard GLM various shrinkage-based GLM. summary table produced compare distances across different ρ\\rho values. L2 Distance Estimated True Coefficients (Imbalanced LR)","code":"# Load packages library(savvyGLM) library(MASS) library(glm2) library(CVXR) library(knitr)  set.seed(123) n_val <- 500 p_val <- 25 rho_vals <- c(-0.75, -0.5, 0, 0.5, 0.75) mu_val <- 0 target_proportion <- 0.05 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- binomial(link = \"logit\")  sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  findStartingValues <- function(x, y) {   beta <- Variable(ncol(x))   eta <- x %*% beta   g_y <- (y + 0.5) / 2   logit_g_y <- log(g_y / (1 - g_y))   objective <- Minimize(sum_squares(logit_g_y - eta))   problem <- Problem(objective)   result <- solve(problem)   as.numeric(result$getValue(beta)) }  model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\", \"Sh\") l2_matrix <- matrix(NA, nrow = length(model_names), ncol = length(rho_vals),                     dimnames = list(model_names, paste0(\"rho=\", rho_vals))) for (j in seq_along(rho_vals)) {   rho_val <- rho_vals[j]   Sigma <- sigma.rho(rho_val, p_val)   n_val_large <- n_val * 10      X_large <- mvrnorm(n_val_large, mu = rep(mu_val, p_val), Sigma = Sigma)   X_large_intercept <- cbind(1, X_large)   beta_true <- theta_func(p_val + 1)   mu_y_large <- as.vector(1 / (1 + exp(-X_large_intercept %*% beta_true)))   y_large <- rbinom(n = n_val_large, size = 1, prob = mu_y_large)    y_zero_indices <- which(y_large == 0)[1:round(n_val * target_proportion)]   y_one_indices <- which(y_large == 1)[1:(n_val - round(n_val * target_proportion))]   final_indices <- c(y_zero_indices, y_one_indices)   X_final <- X_large_intercept[final_indices, ]   y_final <- y_large[final_indices]   starting_values <- findStartingValues(X_final, y_final)      fit_ols <- glm.fit2(X_final, y_final, start = starting_values,                       control = control_list, family = family_type)   l2_matrix[\"OLS\", j] <- norm(fit_ols$coefficients - beta_true, type = \"2\")    for (m in model_names[-1]) {     fit <- savvy_glm.fit2(X_final, y_final, model_class = m,                            start = starting_values, control = control_list, family = family_type)     l2_matrix[m, j] <- norm(fit$coefficients - beta_true, type = \"2\")   } } l2_table <- as.data.frame(l2_matrix) kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients (Imbalanced LR)\")"},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"log-link-function","dir":"Articles","previous_headings":"Simulation Examples > Poisson GLMs","what":"Log Link Function","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"Poisson GLMs log link, mean response modeled μ=exp(η)\\mu = \\exp(\\eta) η=Xinterceptβtrue\\eta = X_{\\text{intercept}} \\, \\beta_{\\text{true}}. simulation, covariates generated multivariate normal distribution Toeplitz covariance matrix. responses simulated Poisson distribution rate μ=exp(η)\\mu = \\exp(\\eta). fit models using standard GLM (via glm.fit2) shrinkage-based GLM (via savvy_glm.fit2in savvyGLM package). summary table produced compare distances across different ρ\\rho values. L2 Distance Estimated True Coefficients (log link Poisson GLM)","code":"# Load packages library(savvyGLM) library(MASS) library(glm2) library(CVXR) library(knitr)  set.seed(123) n_val <- 500 p_val <- 25 rho_vals <- c(-0.75, -0.5, 0, 0.5, 0.75) mu_val <- 0 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- poisson(link = \"log\")  sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  theta_func <- function(p_val) {   base_increment <- 0.1   growth_rate <- 0.95    betas <- base_increment * (growth_rate ^ seq(from = 0, length.out = ceiling(p_val / 2)))   betas <- rep(betas, each = 2)[1:p_val]   signs <- rep(c(1, -1), length.out = p_val)   betas <- betas * signs   return(betas) }  findStartingValues <- function(x, y) {   beta <- Variable(ncol(x))   eta <- x %*% beta   objective <- Minimize(sum_squares(log(y + 0.1) - eta))   problem <- Problem(objective)   result <- solve(problem)   starting_values <- as.numeric(result$getValue(beta))   return(starting_values) }  model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\", \"Sh\") l2_matrix <- matrix(NA, nrow = length(model_names), ncol = length(rho_vals),                     dimnames = list(model_names, paste0(\"rho=\", rho_vals))) for (j in seq_along(rho_vals)) {   rho_val <- rho_vals[j]   Sigma <- sigma.rho(rho_val, p_val)      X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma)   X_intercept <- cbind(1, X)   beta_true <- theta_func(p_val + 1)   mu_y <- as.vector(exp(X_intercept %*% beta_true))   y <- rpois(n_val, lambda = mu_y)   starting_values <- findStartingValues(X_intercept, y)      fit_ols <- glm.fit2(X_intercept, y, start = starting_values,                       control = control_list, family = family_type)   l2_matrix[\"OLS\", j] <- norm(fit_ols$coefficients - beta_true, type = \"2\")    for (m in model_names[-1]) {     fit <- savvy_glm.fit2(X_intercept, y, model_class = m,                            start = starting_values, control = control_list, family = family_type)     l2_matrix[m, j] <- norm(fit$coefficients - beta_true, type = \"2\")   } } l2_table <- as.data.frame(l2_matrix) kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients (log link for Poisson GLM)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"sqrt-link-function","dir":"Articles","previous_headings":"Simulation Examples > Poisson GLMs","what":"sqrt Link Function","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"Poisson GLM sqrt link, mean response defined μ=η2\\mu = \\eta^2 η=Xinterceptβtrue\\eta = X_{\\text{intercept}} \\, \\beta_{\\text{true}}. simulation procedure similar log link case; however, responses generated Poission distribution λ\\lambdaμ=η2\\mu=\\eta^2. address potential numerical issues (non-positive responses). Models fit using standard GLM (via glm.fit2) shrinkage-based GLM (via savvy_glm.fit2in savvyGLM package). summary table produced compare distances across different ρ\\rho values. L2 Distance Estimated True Coefficients (sqrt link Poisson GLM)","code":"# Load packages library(savvyGLM) library(MASS) library(glm2) library(CVXR) library(knitr)  set.seed(123) n_val <- 500 p_val <- 25 rho_vals <- c(-0.75, -0.5, 0, 0.5, 0.75) mu_val <- 0 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- poisson(link = \"sqrt\")  sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  findStartingValues <- function(x, y, epsilon = 1e-6) {   beta <- Variable(ncol(x))   eta <- x %*% beta   objective <- Minimize(sum_squares(sqrt(y + 0.1) - eta))   constraints <- list(eta >= epsilon)   problem <- Problem(objective, constraints)   result <- solve(problem)   starting_values <- as.numeric(result$getValue(beta))   return(starting_values) }  model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\", \"Sh\") l2_matrix <- matrix(NA, nrow = length(model_names), ncol = length(rho_vals),                     dimnames = list(model_names, paste0(\"rho=\", rho_vals))) for (j in seq_along(rho_vals)) {   rho_val <- rho_vals[j]   Sigma <- sigma.rho(rho_val, p_val)      X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma)   X_intercept <- cbind(1, X)   beta_true <- theta_func(p_val + 1)   mu_y <- as.vector((X_intercept %*% beta_true)^2)   y <- rpois(n_val, lambda = mu_y)   starting_values <- findStartingValues(X_intercept, y)      fit_ols <- glm.fit2(X_intercept, y, start = starting_values,                       control = control_list, family = family_type)   l2_matrix[\"OLS\", j] <- norm(fit_ols$coefficients - beta_true, type = \"2\")    for (m in model_names[-1]) {     fit <- savvy_glm.fit2(X_intercept, y, model_class = m,                            start = starting_values, control = control_list, family = family_type)     l2_matrix[m, j] <- norm(fit$coefficients - beta_true, type = \"2\")   } } l2_table <- as.data.frame(l2_matrix) kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients (sqrt link for Poisson GLM)\")"},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"log-link-function-1","dir":"Articles","previous_headings":"Simulation Examples > Gamma GLMs","what":"log Link Function","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"Gamma GLMs log link, mean response given μ=exp(η)\\mu = \\exp(\\eta) η=Xinterceptβtrue\\eta = X_{\\text{intercept}} \\, \\beta_{\\text{true}}. Covariates generated , responses drawn Gamma distribution shape μ=exp(η)\\mu =\\exp(\\eta). retry mechanism used ensure simulated responses positive, required Gamma model. Models fit using standard GLM (via glm.fit2) shrinkage-based GLM (via savvy_glm.fit2in savvyGLM package). summary table produced compare distances across different ρ\\rho values. L2 Distance Estimated True Coefficients (log link Gamma GLM)","code":"# Load packages library(savvyGLM) library(MASS) library(glm2) library(CVXR) library(knitr)  set.seed(123) n_val <- 500 p_val <- 25 rho_vals <- c(-0.75, -0.5, 0, 0.5, 0.75) mu_val <- 0 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- Gamma(link = \"log\")  sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  theta_func <- function(p_val) {   base_increment <- 0.1   growth_rate <- 0.95    betas <- base_increment * (growth_rate ^ seq(from = 0, length.out = ceiling(p_val / 2)))   betas <- rep(betas, each = 2)[1:p_val]   signs <- rep(c(1, -1), length.out = p_val)   betas <- betas * signs   return(betas) }  findStartingValues <- function(x, y) {   beta <- Variable(ncol(x))   eta <- x %*% beta   objective <- Minimize(sum_squares(log(y + 0.1) - eta))   problem <- Problem(objective)   result <- solve(problem)   starting_values <- as.numeric(result$getValue(beta))   return(starting_values) }  model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\", \"Sh\") l2_matrix <- matrix(NA, nrow = length(model_names), ncol = length(rho_vals),                     dimnames = list(model_names, paste0(\"rho=\", rho_vals))) for (j in seq_along(rho_vals)) {   rho_val <- rho_vals[j]   Sigma <- sigma.rho(rho_val, p_val)      X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma)   X_intercept <- cbind(1, X)   beta_true <- theta_func(p_val + 1)   mu_y <- as.vector(exp(X_intercept %*% beta_true))   y <-  rgamma(n_val, shape = mu_y, scale = 1)   retry_count <- 0   while(any(y <= 0) && retry_count < 100) {     bad_idx <- which(y <= 0)     y[bad_idx] <- rgamma(length(bad_idx), shape = mu_y[bad_idx], scale = 1)     retry_count <- retry_count + 1   }   starting_values <- findStartingValues(X_intercept, y)      fit_ols <- glm.fit2(X_intercept, y, start = starting_values,                       control = control_list, family = family_type)   l2_matrix[\"OLS\", j] <- norm(fit_ols$coefficients - beta_true, type = \"2\")    for (m in model_names[-1]) {     fit <- savvy_glm.fit2(X_intercept, y, model_class = m,                            start = starting_values, control = control_list, family = family_type)     l2_matrix[m, j] <- norm(fit$coefficients - beta_true, type = \"2\")   } } l2_table <- as.data.frame(l2_matrix) kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients (log link for Gamma GLM)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"sqrt-link-function-1","dir":"Articles","previous_headings":"Simulation Examples > Gamma GLMs","what":"sqrt Link Function","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"Gamma GLMs sqrt link, mean response modeled μ=η2\\mu = \\eta^2 η=Xinterceptβtrue\\eta = X_{\\text{intercept}} \\, \\beta_{\\text{true}}. Covariates generated , responses drawn Gamma distribution shape μ=η2\\mu =\\eta^2, including retry mechanism ensure response values positive. Fitting models using standard GLM (via glm.fit2) shrinkage-based GLM (via savvy_glm.fit2in savvyGLM package). summary table produced compare distances across different ρ\\rho values. L2 Distance Estimated True Coefficients (sqrt link Gamma GLM)","code":"# Load packages library(savvyGLM) library(MASS) library(glm2) library(CVXR) library(knitr)  set.seed(123) n_val <- 500 p_val <- 25 rho_vals <- c(-0.75, -0.5, 0, 0.5, 0.75) mu_val <- 0 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- Gamma(link = \"sqrt\")  sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  findStartingValues <- function(x, y, epsilon = 1e-6) {   beta <- Variable(ncol(x))   eta <- x %*% beta   objective <- Minimize(sum_squares(sqrt(y + 0.1) - eta))   constraints <- list(eta >= epsilon)   problem <- Problem(objective, constraints)   result <- solve(problem)   starting_values <- as.numeric(result$getValue(beta))   return(starting_values) }  model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\", \"Sh\") l2_matrix <- matrix(NA, nrow = length(model_names), ncol = length(rho_vals),                     dimnames = list(model_names, paste0(\"rho=\", rho_vals))) for (j in seq_along(rho_vals)) {   rho_val <- rho_vals[j]   Sigma <- sigma.rho(rho_val, p_val)      X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma)   X_intercept <- cbind(1, X)   beta_true <- theta_func(p_val + 1)   mu_y <- as.vector((X_intercept %*% beta_true)^2)   y <- rgamma(n_val, shape = mu_y, scale = 1)   retry_count <- 0   while(any(y <= 0) && retry_count < 100) {     bad_idx <- which(y <= 0)     y[bad_idx] <- rgamma(length(bad_idx), shape = mu_y[bad_idx], scale = 1)     retry_count <- retry_count + 1   }   starting_values <- findStartingValues(X_intercept, y)      fit_ols <- glm.fit2(X_intercept, y, start = starting_values,                       control = control_list, family = family_type)   l2_matrix[\"OLS\", j] <- norm(fit_ols$coefficients - beta_true, type = \"2\")    for (m in model_names[-1]) {     fit <- savvy_glm.fit2(X_intercept, y, model_class = m,                            start = starting_values, control = control_list, family = family_type)     l2_matrix[m, j] <- norm(fit$coefficients - beta_true, type = \"2\")   } } l2_table <- as.data.frame(l2_matrix) kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients (sqrt link for Gamma GLM)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"real-data-analysis","dir":"Articles","previous_headings":"","what":"Real Data Analysis","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"section, evaluate performance Gamma GLM estimation methods using real flood insurance data three states: Florida (FL), Texas (TX), Louisiana (LA). dataset covers period 2014 2023 includes claims National Flood Insurance Programme (NFIP). state (e.g., Florida (FL) Louisiana (LA)), data provided , can download NFIP follow preprocess steps provided paper. year, dataset split 70% training set 30% test set. Models fitted using standard GLM (via glm.fit2) several shrinkage-based GLM (via savvy_glm.fit2 model classes SR, GSR, St, DSh, optionally Sh) using two different link functions: Gamma GLMs log link, mean response modeled μ=exp(η)\\mu = \\exp(\\eta). Gamma GLMs sqrt link, mean response modeled μ=η2\\mu = \\eta^2. replication, MSE test set computed. shrinkage-based GLM, calculate ratio MSE Ratio=MSEBaseline (OLS)MSEShrinkage. \\text{MSE Ratio} = \\frac{\\text{MSE}_{\\text{Baseline (OLS)}}}{\\text{MSE}_{\\text{Shrinkage}}}. ratio greater one indicates shrinkage-based GLM achieved lower MSE (.e., superior performance) compared standard update. process repeated multiple times (e.g., N=100N=100 replications per year), average ratio computed model year. , just provide two cases detailed account full data processing evaluation procedures, please refer main paper.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"fl-dataset-with-log-link-function","dir":"Articles","previous_headings":"Real Data Analysis","what":"FL dataset with log Link Function","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"","code":"# Load required packages library(savvyGLM) library(MASS) library(glm2) library(CVXR) library(caret) library(knitr)  set.seed(1234) years <- 2014:2015 model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\") N <- 10 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- Gamma(link = \"log\")  Evaluation_results <- matrix(NA, nrow = length(model_names), ncol = length(years),                              dimnames = list(model_names, years))  findStartingValues <- function(x, y) {   beta <- Variable(ncol(x))   eta <- x %*% beta   objective <- Minimize(sum_squares(log(y + 0.1) - eta))   problem <- Problem(objective)   result <- solve(problem)   starting_values <- as.numeric(result$getValue(beta))   return(starting_values) }  calculate_mse <- function(true_values, predicted_values) {   mean((true_values - predicted_values)^2) }  for (yr in years) {   cat(\"Processing year:\", yr, \"\\n\")   filename <- sprintf(\"FL_data_%d.csv\", yr)   data_year <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE)      ratio_mat <- matrix(NA, nrow = N, ncol = length(model_names)-1)   colnames(ratio_mat) <- model_names[-1]   for (i in 1:N) {     set.seed(yr * 1000 + i)     train_index <- createDataPartition(data_year[, 1], p = 0.7, list = FALSE)     train_data <- data_year[train_index, ]     test_data <- data_year[-train_index, ]          X_train <- as.matrix(train_data[, -1])     y_train <- train_data[, 1]     X_test <- as.matrix(test_data[, -1])     y_test <- test_data[, 1]     X_train_int <- cbind(1, X_train)     X_test_int <- cbind(1, X_test)     starting_values <- findStartingValues(X_train_int, y_train)        model_glm2 <- glm.fit2(X_train_int, y_train, start = starting_values,                            control = control_list, family = family_type)     y_pred_glm2 <- exp(X_test_int %*% model_glm2$coefficients)     mse_ols <- calculate_mse(y_test, y_pred_glm2)     for (m in model_names[-1]) {       model_savvy <- savvy_glm.fit2(X_train_int, y_train, model_class = m,                                       start = starting_values, control = control_list, family = family_type)       y_pred <- exp(X_test_int %*% model_savvy$coefficients)       mse_savvy <- calculate_mse(y_test, y_pred)       ratio_mat[i, m] <- mse_ols / mse_savvy     }   }   avg_ratios <- c(1, colMeans(ratio_mat, na.rm = TRUE))   Evaluation_results[, as.character(yr)] <- avg_ratios } Evaluation_results_df <- as.data.frame(Evaluation_results) kable(Evaluation_results_df, digits = 4,       caption = \"Average MSE Ratio (OLS / Shrinkage) for Each Year (Gamma GLM with Log Link)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/articles/savvyGLM.html","id":"la-dataset-with-sqrt-link-function","dir":"Articles","previous_headings":"Real Data Analysis","what":"LA dataset with sqrt Link Function","title":"savvyGLM: Shrinkage Methods for Generalized Linear Models","text":"","code":"# Load required packages library(savvyGLM) library(MASS) library(glm2) library(CVXR) library(caret) library(knitr)  set.seed(1234) years <- 2014:2023 model_names <- c(\"OLS\", \"SR\", \"GSR\", \"St\", \"DSh\") N <- 100 control_list <- list(maxit = 250, epsilon = 1e-6, trace = FALSE) family_type <- Gamma(link = \"sqrt\")  Evaluation_results <- matrix(NA, nrow = length(model_names), ncol = length(years),                              dimnames = list(model_names, years))  findStartingValues <- function(x, y, epsilon = 1e-6) {   beta <- Variable(ncol(x))   eta <- x %*% beta   objective <- Minimize(sum_squares(sqrt(y + 0.1) - eta))   constraints <- list(eta >= epsilon)   problem <- Problem(objective, constraints)   result <- solve(problem)   starting_values <- as.numeric(result$getValue(beta))   return(starting_values) }  calculate_mse <- function(true_values, predicted_values) {   mean((true_values - predicted_values)^2) }  for (yr in years) {   cat(\"Processing year:\", yr, \"\\n\")   filename <- sprintf(\"LA_data_%d.csv\", yr)   data_year <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE)      ratio_mat <- matrix(NA, nrow = N, ncol = length(model_names)-1)   colnames(ratio_mat) <- model_names[-1]   for (i in 1:N) {     set.seed(yr * 1000 + i)     train_index <- createDataPartition(data_year[, 1], p = 0.7, list = FALSE)     train_data <- data_year[train_index, ]     test_data <- data_year[-train_index, ]          X_train <- as.matrix(train_data[, -1])     y_train <- train_data[, 1]     X_test <- as.matrix(test_data[, -1])     y_test <- test_data[, 1]     X_train_int <- cbind(1, X_train)     X_test_int <- cbind(1, X_test)     starting_values <- findStartingValues(X_train_int, y_train)        model_glm2 <- glm.fit2(X_train_int, y_train, start = starting_values,                            control = control_list, family = family_type)     y_pred_glm2 <- (X_test_int %*% model_glm2$coefficients)^2     mse_ols <- calculate_mse(y_test, y_pred_glm2)     for (m in model_names[-1]) {       model_savvy <- savvy_glm.fit2(X_train_int, y_train, model_class = m,                                       start = starting_values, control = control_list, family = family_type)       y_pred <- exp(X_test_int %*% model_savvy$coefficients)       mse_savvy <- calculate_mse(y_test, y_pred)       ratio_mat[i, m] <- mse_ols / mse_savvy     }   }   avg_ratios <- c(1, colMeans(ratio_mat, na.rm = TRUE))   Evaluation_results[, as.character(yr)] <- avg_ratios } Evaluation_results_df <- as.data.frame(Evaluation_results) kable(Evaluation_results_df, digits = 4,       caption = \"Average MSE Ratio (OLS / Shrinkage) for Each Year (Gamma GLM with Log Link)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziwei Chen. Author, maintainer.           0009-0009-6376-3850 Vali Asimit. Author.           0000-0002-7706-0066","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chen Z, Asimit V (2025). savvyGLM: Generalized Linear Models Slab Shrinkage Estimators. R package version 0.1.0, https://Ziwei-ChenChen.github.io/savvyGLM.","code":"@Manual{,   title = {savvyGLM: Generalized Linear Models with Slab and Shrinkage Estimators},   author = {Ziwei Chen and Vali Asimit},   year = {2025},   note = {R package version 0.1.0},   url = {https://Ziwei-ChenChen.github.io/savvyGLM}, }"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/index.html","id":"savvyglm-shrinkage-methods-for-generalized-linear-models","dir":"","previous_headings":"","what":"Generalized Linear Models with Slab and Shrinkage Estimators","title":"Generalized Linear Models with Slab and Shrinkage Estimators","text":"savvyGLM package offers complete framework fitting shrinkage estimators generalized linear models (GLMs). integrates several shrinkage methods Iteratively Reweighted Least Squares (IRLS) algorithm improve convergence estimation accuracy, particularly standard maximum likelihood estimation challenged issues like multicollinearity high number predictors. Shrinkage estimators introduce small bias produces large reduction variance, making IRLS estimates reliable based solely traditional OLS update. details shrinkage estimators employed package, please refer Slab Shrinkage Linear Regression Estimation. package builds theoretical work discussed : Asimit, V., Chen, Z., Dimitrova, D., Xie, Y., & Zhang, Y. (2025). Shrinkage GLM Modeling. official documentation site available : https://Ziwei-ChenChen.github.io/savvyGLM interested applying shrinkage methods within linear regression, please refer companion package savvySh.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/index.html","id":"installation-guide","dir":"","previous_headings":"","what":"Installation Guide","title":"Generalized Linear Models with Slab and Shrinkage Estimators","text":"can install development version savvyGLM directly GitHub: installed, load package:","code":"remotes::install_github(\"Ziwei-ChenChen/savvyGLM\") library(savvyGLM)"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Generalized Linear Models with Slab and Shrinkage Estimators","text":"package supports several shrinkage approaches within IRLS algorithm, including: Stein Estimator (St): Applies single shrinkage factor coefficients. Diagonal Shrinkage (DSh): Applies separate shrinkage factors coefficient. Slab Regression (SR): Adds penalty shrinks solution along fixed direction. Generalized Slab Regression (GSR): Extends SR allowing shrinkage along multiple directions. Shrinkage Estimator (Sh): Uses full shrinkage matrix estimated solving Sylvester equation. method optional due higher computational cost. methods build robust features glm2 package—step-halving—enhance performance GLMs.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generalized Linear Models with Slab and Shrinkage Estimators","text":"two basic examples shows solve common/non-common problem:","code":"set.seed(123) n <- 100 p <- 5 x <- matrix(rnorm(n * p), n, p) beta_true <- c(1, 0.5, -0.5, 1, -1) eta <- x %*% beta_true prob <- 1 / (1 + exp(-eta)) y <- rbinom(n, size = 1, prob = prob)  fit <- savvy_glm.fit2(   x      = cbind(1, x),    y      = y,   model_class = \"SR\",   family = binomial(link = \"logit\"),   control = glm.control(trace = TRUE) ) print(fit$coefficients) print(fit$chosen_fit) library(statmod) set.seed(12123) n <- 100 p <- 3 x <- matrix(rnorm(n * p), n, p) beta_true <- c(0.5, 0.3, 0.8) eta <- x %*% beta_true mu <- exp(eta)  y <- statmod::rinvgauss(n, mean = mu, shape = 2)  fit <- savvy_glm.fit2(   x = cbind(1, x),   y = y,   family = inverse.gaussian(link = \"log\"),   model_class = c(\"SR\", \"DSh\"),   control = glm.control(trace = TRUE) ) coef(fit) print(fit$chosen_fit) set.seed(124) x <- rnorm(100) y <- rbinom(100, 1, plogis(x)) # need to set a starting value for the next fit fit <- savvy_glm2(y ~ x, family = quasi(variance = \"mu(1-mu)\",                   link = \"logit\"), start = c(0,1)) summary(fit) coef(fit) print(fit$chosen_fit)"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Generalized Linear Models with Slab and Shrinkage Estimators","text":"Ziwei Chen – ziwei.chen.3@citystgeorges.ac.uk Vali Asimit – asimit@citystgeorges.ac.uk","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Generalized Linear Models with Slab and Shrinkage Estimators","text":"package licensed MIT License.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm.fit2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","title":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","text":"savvy_glm.fit2 modified version glm.fit enhances standard iteratively reweighted least squares (IRLS) algorithm incorporating set shrinkage estimator functions. functions (namely St_ost, DSh_ost, SR_ost, GSR_ost, optionally Sh_ost) provide alternative coefficient updates based shrinkage principles. function allows user select one methods via model_class argument.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm.fit2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","text":"","code":"savvy_glm.fit2(x, y, weights = rep(1, nobs),                         model_class = c(\"St\", \"DSh\", \"SR\", \"GSR\", \"Sh\"),                         start = NULL, etastart = NULL, mustart = NULL,                         offset = rep(0, nobs), family = gaussian(),                         control = list(), intercept = TRUE,                         use_parallel = TRUE)"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm.fit2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","text":"x numeric matrix predictors. glm.fit. y numeric vector responses. glm.fit. weights optional vector weights used fitting process. glm.fit. model_class character vector specifying shrinkage model(s) used. Allowed values \"St\", \"DSh\", \"SR\", \"GSR\", \"Sh\". single value provided, method run. multiple values provided, function runs specified methods parallel (use_parallel = TRUE) returns best one based Akaike Information Criterion (AIC). user explicitly supply value model_class, default c(\"St\", \"DSh\", \"SR\", \"GSR\") (.e. \"Sh\" considered). start Starting values parameters. glm.fit. etastart Starting values linear predictor. glm.fit. mustart Starting values mean. glm.fit. offset optional offset included model. glm.fit. family description error distribution link function used model. glm.fit. control list parameters controlling fitting process. glm.fit. intercept logical value indicating whether intercept included model, defalut TRUE. glm.fit. use_parallel Logical. TRUE, enables parallel execution fitting process. Defaults TRUE. Set FALSE serial execution.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm.fit2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","text":"value returned savvy_glm.fit2 structure value returned glm.fit. includes following components: coefficients estimated coefficients. residuals working residuals, residuals final iteration IWLS fit. fitted.values fitted mean values, obtained transforming linear predictors inverse link function. R upper-triangular factor QR decomposition weighted model matrix. rank numeric rank fitted linear model. qr QR decomposition weighted model matrix. family family object used. linear.predictors final linear predictors. deviance deviance final model. aic AIC final model. null.deviance deviance null model. iter number iterations used. weights final weights used fitting process. prior.weights weights initially supplied. df.residual residual degrees freedom. df.null residual degrees freedom null model. y response vector used. converged logical value indicating whether IRLS iterations converged. boundary logical value indicating whether algorithm stopped boundary value. time time taken fitting process. chosen_fit name chosen fitting method based AIC.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm.fit2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","text":"savvy_glm.fit2 extends classical Generalized Linear Model (GLM) fitting procedure evaluating collection shrinkage‐based updates iteration IRLS algorithm. multiple shrinkage methods specified model_class (default c(\"St\", \"DSh\", \"SR\", \"GSR\"), thereby excluding \"Sh\" unless explicitly provided), user explicitly includes \"Sh\" (example, model_class = c(\"St\", \"DSh\", \"SR\", \"GSR\", \"Sh\") model_class = c(\"St\", \"Sh\")), method Sh_ost also evaluated. function can run candidate methods parallel (use_parallel = TRUE). final model selected based lowest AIC. cases candidate model returns NA non-finite AIC (may occur using quasi-likelihood families), deviance used uniformly model-selection criterion instead. essence, function starts initial estimates (via start, etastart, mustart) iteratively updates coefficients using chosen shrinkage method(s). incorporation shrinkage estimators aims improve convergence properties yield stable parsimonious models various data scenarios. Shrinkage Estimators Used IRLS Algorithm: Stein Estimator (St)  Computes single multiplicative shrinkage factor applied uniformly coefficients. factor chosen minimize overall mean squared error (MSE) OLS estimator. Best suited predictors similarly scaled uniform shrinkage appropriate.  Diagonal Shrinkage (DSh)  Extends Stein estimator calculating individual shrinkage factor coefficient. factor derived magnitude variance corresponding coefficient. Provides enhanced flexibility predictor scales contributions differ.  Simple Slab Regression (SR)  Penalizes projection OLS estimator along fixed, predefined direction. Uses closed-form solution slab (fixed-penalty) constraint. Suitable prior information suggests shrinking coefficients along known direction.  Generalized Slab Regression (GSR)  Generalizes SR incorporating multiple, data-adaptive shrinkage directions. Typically employs leading eigenvectors design matrix directions. Provides adaptive regularization effectively handles multicollinearity.  Shrinkage Estimator (Sh)  Computes non-diagonal shrinkage matrix solving Sylvester equation. Transforms OLS estimator achieve lower mean squared error. estimator evaluated \"Sh\" explicitly included model_class argument.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm.fit2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","text":"Marschner, . C. (2011). glm2: Fitting Generalized Linear Models Convergence Problems. R Journal, 3(2), 12–15. doi:10.32614/RJ-2011-012. Available : https://doi.org/10.32614/RJ-2011-012. Asimit, V., Cidota, M. ., Chen, Z., & Asimit, J. (2025). Slab Shrinkage Linear Regression Estimation. Retrieved https://openaccess.city.ac.uk/id/eprint/35005/. SavvyGLM article. https://ziwei-chenchen.github.io/savvyGLM.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm.fit2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Linear Models Fitting with Slab and Shrinkage Estimators — savvy_glm.fit2","text":"Ziwei Chen Vali Asimit Maintainer: Ziwei Chen <ziwei.chen.3@citystgeorges.ac.uk>","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","title":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","text":"savvy_glm2 extends classical glm2 function glm2 package embedding set shrinkage-based methods within iteratively reweighted least squares (IRLS) algorithm. shrinkage methods (implemented via savvy_glm.fit2) designed improve convergence estimation accuracy. user can specify one methods model_class argument. multiple methods provided (default c(\"St\", \"DSh\", \"SR\", \"GSR\", \"Sh\")), function can evaluate parallel (controlled use_parallel argument) selects final model based criterion.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","text":"","code":"savvy_glm2(formula, family = gaussian, data, weights,                model_class = c(\"St\", \"DSh\", \"SR\", \"GSR\", \"Sh\"), subset,                na.action, start = NULL, etastart, mustart, offset,                control = list(...), model = TRUE,                method = \"savvy_glm.fit2\", x = FALSE, y = TRUE,                contrasts = NULL, use_parallel = TRUE, ...)"},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","text":"formula object class \"formula\": symbolic description model fitted. glm2. family description error distribution link function used model. glm2. data optional data frame, list environment containing variables model. glm2. weights optional vector weights used fitting process. glm2. model_class character vector specifying shrinkage method(s) used underlying fitter savvy_glm.fit2. Allowed values \"St\", \"DSh\", \"SR\", \"GSR\", \"Sh\". single value provided, method executed. multiple values provided, specified methods evaluated (parallel use_parallel = TRUE) one lowest AIC returned. default, value c(\"St\", \"DSh\", \"SR\", \"GSR\"); note \"Sh\" method considered explicitly included. subset optional vector specifying subset observations used fitting process. glm2. na.action function indicates happen data contain NAs. glm2. start Starting values parameters linear predictor. glm2. etastart Starting values linear predictor. glm2. mustart Starting values vector means. glm2. offset optional vector specifying priori known component included linear predictor fitting. glm2. control list control parameters pass iterative fitting process. glm2. model logical value indicating whether model frame included component returned value. glm2. method method used fitting model. default savvy_glm.fit2. method uses IRLS custom optimization methods ensure better convergence evaluating different fitting methods selecting best one based AIC. glm2, alternative method \"model.frame\" returns model frame fitting. x logical value indicating whether model matrix used fitting process returned component returned value. glm2. y logical value indicating whether response vector used fitting process returned component returned value. glm2. contrasts optional list. See contrasts.arg model.matrix.default. glm2. use_parallel logical value specifying whether evaluate multiple shrinkage methods parallel. Defaults TRUE. Setting FALSE forces sequential evaluation. ... Additional arguments passed low level regression fitting functions. glm2.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","text":"value returned savvy_glm2 exactly structure returned glm2, except : method name fitter function used, default savvy_glm.fit2. chosen_fit name chosen fitting method based AIC.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","text":"savvy_glm2 improves upon standard Generalized Linear Model (GLM) fitting process incorporating shrinkage estimator functions (St_ost, DSh_ost, SR_ost, GSR_ost, optionally Sh_ost) within IRLS algorithm. function begins initial parameter estimates iteratively updates coefficients using specified shrinkage methods. multiple methods specified model_class, may evaluated parallel (use_parallel = TRUE), final model selected based lowest AIC. cases candidate model returns NA non-finite AIC (using quasi-likelihood families), deviance used uniformly selection criterion. approach ensures chosen model represents best trade-fit complexity given data specified family.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","text":"Marschner, . C. (2011). glm2: Fitting Generalized Linear Models Convergence Problems. R Journal, 3(2), 12–15. doi:10.32614/RJ-2011-012. Available : https://doi.org/10.32614/RJ-2011-012. Asimit, V., Cidota, M. ., Chen, Z., & Asimit, J. (2025). Slab Shrinkage Linear Regression Estimation. Retrieved https://openaccess.city.ac.uk/id/eprint/35005/. SavvyGLM article. https://ziwei-chenchen.github.io/savvyGLM.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvyGLM/reference/savvy_glm2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Linear Models with Slab and Shrinkage Estimators — savvy_glm2","text":"Ziwei Chen Vali Asimit Maintainer: Ziwei Chen <ziwei.chen.3@citystgeorges.ac.uk>","code":""}]
